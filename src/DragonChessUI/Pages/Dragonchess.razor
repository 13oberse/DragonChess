@page "/Dragonchess"
@using Blazor.Extensions
@using Blazor.Extensions.Canvas
@using Blazor.Extensions.Canvas.Canvas2D
@using Newtonsoft.Json.Linq
@using Newtonsoft.Json
@inject IJSRuntime jsRuntime

<PageTitle>Dragonchess</PageTitle>

<!-- Hidden images to render later -->
<img @ref="image1" hidden id="image1" src="assets/Italic_D.svg" />

<img @ref="blackPieces[0]" hidden id="blackB" src="assets/Black_B.svg" />
<img @ref="blackPieces[1]" hidden id="blackC" src="assets/Black_C.svg" />
<img @ref="blackPieces[2]" hidden id="blackD" src="assets/Black_D.svg" />
<img @ref="blackPieces[3]" hidden id="blackE" src="assets/Black_E.svg" />
<img @ref="blackPieces[4]" hidden id="blackG" src="assets/Black_G.svg" />
<img @ref="blackPieces[5]" hidden id="blackH" src="assets/Black_H.svg" />
<img @ref="blackPieces[6]" hidden id="blackK" src="assets/Black_K.svg" />
<img @ref="blackPieces[7]" hidden id="blackM" src="assets/Black_M.svg" />
<img @ref="blackPieces[8]" hidden id="blackO" src="assets/Black_O.svg" />
<img @ref="blackPieces[9]" hidden id="blackP" src="assets/Black_P.svg" />
<img @ref="blackPieces[10]" hidden id="blackR" src="assets/Black_R.svg" />
<img @ref="blackPieces[11]" hidden id="blackS" src="assets/Black_S.svg" />
<img @ref="blackPieces[12]" hidden id="blackT" src="assets/Black_T.svg" />
<img @ref="blackPieces[13]" hidden id="blackU" src="assets/Black_U.svg" />
<img @ref="blackPieces[14]" hidden id="blackW" src="assets/Black_W.svg" />

<img @ref="whitePieces[0]" hidden id="whiteB" src="assets/White_B.svg" />
<img @ref="whitePieces[1]" hidden id="whiteC" src="assets/White_C.svg" />
<img @ref="whitePieces[2]" hidden id="whiteD" src="assets/White_D.svg" />
<img @ref="whitePieces[3]" hidden id="whiteE" src="assets/White_E.svg" />
<img @ref="whitePieces[4]" hidden id="whiteG" src="assets/White_G.svg" />
<img @ref="whitePieces[5]" hidden id="whiteH" src="assets/White_H.svg" />
<img @ref="whitePieces[6]" hidden id="whiteK" src="assets/White_K.svg" />
<img @ref="whitePieces[7]" hidden id="whiteM" src="assets/White_M.svg" />
<img @ref="whitePieces[8]" hidden id="whiteO" src="assets/White_O.svg" />
<img @ref="whitePieces[9]" hidden id="whiteP" src="assets/White_P.svg" />
<img @ref="whitePieces[10]" hidden id="whiteR" src="assets/White_R.svg" />
<img @ref="whitePieces[11]" hidden id="whiteS" src="assets/White_S.svg" />
<img @ref="whitePieces[12]" hidden id="whiteT" src="assets/White_T.svg" />
<img @ref="whitePieces[13]" hidden id="whiteU" src="assets/White_U.svg" />
<img @ref="whitePieces[14]" hidden id="whiteW" src="assets/White_W.svg" />

<div class="canvasHolder" id="canvasHolder" @ref="divCanvas" @onclick="OnCanvasClick">
    <BECanvas @ref="myCanvas" Height="@canH" Width="@canW"></BECanvas>
</div>

@code {
    ElementReference divCanvas;
    BECanvasComponent? myCanvas;
    Canvas2DContext? ctx;
    // Constants
    const long minH = 200; // Sample minimum height/width (unused currently)
    const long minW = 300;
    const int padding = 5; // Padding around grid (so outside lines aren't cut off)
    const int gridH = 8; // Height of grid (in squares)
    const int gridW = 12; // Width of grid (in squares)
    const int numGrids = 3; // Number of grids to render
    const double sqzFctr = 3; // Factor by which the grid is compressed vertically
    const double tiltFctr = 1; // Factor by which the grid is tilted (slope, e.g. 1=45deg)

    // These definitions are the default values (they are changed by a re-size)
    long canH = 570; // Current (effective) height/width of canvas
    long canW = 890; //    -may be smaller than actual height/width in one dimension
    double canFullH = 570; // Actual full height/width of canvas
    double canFullW = 890; //     -used only to erase full canvas
    long gridOffset = 200; // Offset (in pixels) between grids
    int PPS = 60; // Pixels per grid square

    // Game variables
    static GameManager gameMgr = new GameManager();
    static Dragonchess?[] players = new Dragonchess[20];

    List<Position> movePositions = new List<Position>();
    List<Position> remoteCapturePositions = new List<Position>();
    ChessPiece? highlightedPiece = null;

    bool p2Perspective = false;

    ElementReference image1;
    ElementReference[] blackPieces = new ElementReference[15];
    ElementReference[] whitePieces = new ElementReference[15];

    readonly Random rand = new();
    private int currentCount;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            ctx = await myCanvas.CreateCanvas2DAsync();
            await jsRuntime.InvokeAsync<object>("initRenderJS", DotNetObjectReference.Create(this));
            await base.OnInitializedAsync();
            if (players[0] is null)
            {
                players[0] = this;
                gameMgr.ResetBoard();
            }
            else if (players[1] is null)
            {
                players[1] = this;
                p2Perspective = true;
            }
        }
    }

    // Re-calculate variables based on the size of the canvas and re-render
    [JSInvokable]
    public async Task ResizeInBlazor(double width, double height)
    {
        /* Resizing formulas:
        * (gotta calc gridOffset = PPS * (gridH + 2) / sqzFctr)
        * canH = 2 * gridOffset + PPS * gridH / sqzFctr + 2 * padding
        * canW = gridW * PPS + tiltFctr * PPS * gridH / sqzFctr + 2 * padding
        * so then
        * PPS = (canH - 2 * padding - 2 * gridOffset) * sqzFctr / gridH
        *     = (canH - 2 * padding - 2 * (PPS * (gridH + 2) / sqzFctr)) * sqzFctr / gridH
        * PPS = (canW - 2 * padding - tiltFctr * PPS * gridH / sqzFctr) / gridW
        *
        * PPS = (canH - 2 * padding) * sqzFctr / (3 * gridH + 4)
        * PPS = (canW - 2 * padding) * sqzFctr / (gridW * sqzFctr + tiltFctr * gridH)
         */

        var hPPS = (height - 2 * padding) * sqzFctr / (3 * gridH + 4);
        var wPPS = (width - 2 * padding) * sqzFctr / (gridW * sqzFctr + tiltFctr * gridH);

        // Check whether height or width is the limiting dimension
        if (hPPS < wPPS)
        {
            PPS = (int)hPPS; // Use square size based on height
        }
        else
        {
            PPS = (int)wPPS; // Use square size based on width
        }
        // Set the other variables based on the Pixels Per Square
        gridOffset = (int)(PPS * (gridH + 2) / sqzFctr);
        canH = (int)(2 * gridOffset + PPS * gridH / sqzFctr + 2 * padding);
        canW = (int)(gridW * PPS + tiltFctr * PPS * gridH / sqzFctr + 2 * padding);

        canFullH = height;
        canFullW = width;

        await ReRenderGrids();
    }

    public async Task ReRenderForAll()
    {
        for (int i=0; i<players.Length; i++)
        {
            if (players[i] != null)
            {
                try
                {
                    await players[i]!.ReRenderGrids();
                }
                catch
                {
                    players[i] = null;
                }
            }
        }
        //var tasks = players.Where(x=>x!=null).Select(x=>x!.ReRenderGrids()).ToArray();
        //await Task.WhenAll(tasks);
    }

    // Re renders the grid canvas
    private async Task ReRenderGrids()
    {
        // Clear the canvas
        ctx = await myCanvas.CreateCanvas2DAsync();

        // Signal the start of a batch of rendering calls
        await this.ctx.BeginBatchAsync();
        await ctx.ClearRectAsync(0, 0, canFullW, canFullH);

        // Re-render grids (with black grid lines)
        await DrawGrid("Blue", "White", "Black", 0);
        await DrawGrid("Green", "Yellow", "Black", 1);
        await DrawGrid("Red", "Brown", "Black", 2);

        // Draw pieces
        for (int x = 0; x < gridW; x++)
        {
            for (int y = 0; y < gridH; y++)
            {
                for (int z = 0; z < numGrids; z++)
                {
                    ChessPiece? piece = gameMgr.GetPiece(x, y, z);
                    if (piece != null)
                    {
                        // Draw the piece's image at (perspectiveX(x), perspectiveY(y), z)
                        ElementReference img = (piece.Owner == PlayerColor.White) ? whitePieces[piece.ImgID] : blackPieces[piece.ImgID];
                        var coords = transformXY(perspectiveX(x), perspectiveY(y), 2-z);
                        await ctx.DrawImageAsync(img,
                                                 coords.tx,
                                                 coords.ty,
                                                 PPS - PPS / sqzFctr * tiltFctr,
                                                 PPS / sqzFctr - 2);
                        // If highlighted piece, highlight
                        if (piece.Equals(highlightedPiece))
                        {
                            await DrawSquare(perspectiveX(x), perspectiveY(y), 2 - z, "Green", "Green", 0.5f);
                            // Reset alpha value
                            await ctx.SetGlobalAlphaAsync(1.0f);
                        }
                    }
                }
            }
        }

        // Highlight valid moves
        foreach (Position position in movePositions)
        {
            await DrawSquare(perspectiveX(position.X), perspectiveY(position.Y), 2-position.Z, "Yellow", "Yellow", 0.5f);
        }

        // Highlight valid remote captures
        foreach (Position position in remoteCapturePositions)
        {
            await DrawSquare(perspectiveX(position.X), perspectiveY(position.Y), 2-position.Z, "Red", "Red", 0.5f);
        }

        // Signal the end of the batch of rendering calls (now it all renders at once)
        await this.ctx.EndBatchAsync();
    }

    // Logic for reset button
    private async void resetButton()
    {
        int playerNum = -1;
        for (int i = 0; i < players.Length; i++)
        {
            if (this.Equals(players[0]))
            {
                playerNum = i;
                break;
            }
        }
        if (playerNum == 0 || playerNum == 1)
        {
            gameMgr.ResetBoard();
        }
        else if (playerNum >= 2)
        {
            // Rerender to update player list
            await ReRenderForAll();
            if (players[0] == null && players[1] == null)
            {
                // if both players are gone, become player 1
                players[playerNum] = null;
                players[0] = this;
                gameMgr.ResetBoard();
            }
        }
    }

    // Shifts the underlying array x value to the visual x value of the user's perspective and vice versa
    private int perspectiveX(int x)
    {
        if (p2Perspective)
        {
            return 11-x;
        }
        else
        {
            return x;
        }
    }

    // Shifts the underlying array y value to the visual y value of the user's perspective and vice versa
    private int perspectiveY(int y)
    {
        if (p2Perspective)
        {
            return y;
        }
        else
        {
            return 7 - y;
        }
    }

    // TODO: Remove, this is unused and only here for future reference
    private async Task OnButtonPress()
    {
        // First time: draw grid, afterwards: draw an image to random grid square
        if (currentCount != 0)
        {
            // Get reference to canvas
            ctx = await myCanvas.CreateCanvas2DAsync();
            // Get random grid locations
            var gridX = rand.Next(gridW);
            var gridY = rand.Next(gridH);
            var gridZ = rand.Next(numGrids);
            // Get pixel coords and draw a correctly scaled image there
            var coords = transformXY(gridX, gridY, gridZ);
            await ctx.DrawImageAsync(image1, coords.tx, coords.ty, PPS - PPS / sqzFctr * tiltFctr, PPS / sqzFctr);
            return;
        }
        // Draw each grid with black grid lines
        await DrawGrid("Blue", "White", "Black", 0);
        await DrawGrid("Green", "Yellow", "Black", 1);
        await DrawGrid("Red", "Brown", "Black", 2);
        currentCount++;
    }

    // When a player clicks on the grid, do something about it
    // NOTE: This function has no knowledge of the scroll bar, so it only works if you're scrolled all the way up and left
    private async Task OnCanvasClick(MouseEventArgs eventArgs)
    {
        double mouseX = 0;
        double mouseY = 0;

        if (divCanvas.Id?.Length > 0)
        {
            // Get canvas coordinates clicked
            var data = await jsRuntime.InvokeAsync<string>("getDivCanvasOffsets", new object[] { divCanvas });
            var offsets = (JObject?)JsonConvert.DeserializeObject(data);
            if (offsets == null)
            {
                return;
            }
            mouseX = eventArgs.ClientX - offsets.Value<double>("offsetLeft");
            mouseY = eventArgs.ClientY - offsets.Value<double>("offsetTop");

            // Find the square clicked (if any)
            var x = 0;
            var y = 0;
            var z = 0;
            var sqrTopY = 0;
            var sqrBottomY = 0;
            for (z = 0; z < numGrids; z++)
            {
                for (y = 0; y < gridH; y++)
                {
                    sqrTopY = sqrBottomY;
                    (var trash, sqrBottomY) = transformXY(0, y + 1, z);
                    if (mouseY >= sqrTopY && mouseY < sqrBottomY)
                    {
                        break;
                    }
                }
                if (y != gridH)
                {
                    break; // We must've found it (broke out of y for loop)
                }
                if (z == numGrids - 1)
                {
                    return; // Must've clicked below bottom grid
                }
            }
            if (y == 0)
            {
                // Check to see if clicked just above the grid
                (var trash, sqrTopY) = transformXY(0, y, z);
                if (mouseY < sqrTopY)
                {
                    return; // Outside of grid, do nothing
                }
            }
            // y, z are now accurate to row clicked in
            for (x = 0; x <= gridW; x++)
            {
                // Check each boarder to see which side was clicked
                var p1 = transformXY(x, y, z);
                var p2 = transformXY(x, y + 1, z);
                var crossProd = (p2.tx - p1.tx) * (mouseY - p1.ty) - (p2.ty - p1.ty) * (mouseX - p1.tx);
                if (crossProd > 0)
                {
                    // Positive number means left of line
                    break;
                }
            }
            x--; // Decrement x
            if (x < 0 || x >= gridW)
            {
                return; // Outside (left or right) of grid, do nothing
            }

            // Invert z, because the top grid should be z=2
            z = 2 - z;

            // User clicked on square (x, y, z) (corrected for user perspective)
            await ClickXYZ(perspectiveX(x), perspectiveY(y), z);
        }
    }

    // Process a click on the given grid coordinates
    // NOTE: x and y are board coordinates (irrelevant of user perspective)
    // TODO: check/mate when GameManager supports it
    private async Task ClickXYZ(int x, int y, int z)
    {
        //ctx = await hiddenCanvas.CreateCanvas2DAsync(); // if necessary
        ChessPiece? piece = gameMgr.GetPiece(x, y, z);
        PlayerColor turnPlayer = gameMgr.GetTurnPlayer();
        bool myTurn = this.Equals(players[(int)turnPlayer]);
        PlayerColor myColor = this.Equals(players[0]) ? PlayerColor.White : PlayerColor.Black;

        if (piece != null && piece.Equals(highlightedPiece))
        {
            // Remove highlighting
            highlightedPiece = null;
            movePositions = new List<Position>();
            remoteCapturePositions = new List<Position>();
            // Only rerender the current client
            await ReRenderGrids();
        }
        else if (!myTurn || highlightedPiece == null || highlightedPiece.Owner != myColor || !IsHighlighted(x, y, z))
        {
            if (piece == null)
            {
                // Remove highlighting
                highlightedPiece = null;
                movePositions = new List<Position>();
                remoteCapturePositions = new List<Position>();
            }
            else
            {
                // Highlight this new piece
                highlightedPiece = piece;
                movePositions = gameMgr.GetMoves(x, y, z);
                remoteCapturePositions = gameMgr.GetRemoteCaptures(x, y, z);
            }
            // Only rerender the current client
            await ReRenderGrids();
        }
        else // It's my turn and I've already highlighted one of my pieces and clicked a highlighted spot
        {
            bool mate = false;
            // Do the indicated move
            if (remoteCapturePositions.Contains(new Position(x, y, z)))
            {
                mate = gameMgr.DoRemoteCapture(highlightedPiece, x, y, z);
            }
            if (movePositions.Contains(new Position(x, y, z)))
            {
                mate = gameMgr.DoMove(highlightedPiece, x, y, z);
            }
            // Remove highlighting
            highlightedPiece = null;
            movePositions = new List<Position>();
            remoteCapturePositions = new List<Position>();

            if (mate)
            {
                // End of game
            }

            // Rerender for all clients, as game state has updated
            await ReRenderForAll();
        }
        Console.WriteLine("Clicked here: (" + x + ", " + y + ", " + z + ")");
    }

    // Returns true if the indicated square is currently highlighted (in either color)
    private bool IsHighlighted(int x, int y, int z)
    {
        if (movePositions.Contains(new Position(x, y, z)) ||
            remoteCapturePositions.Contains(new Position(x, y, z)))
            {
                return true;
            }
        return false;
    }

    // Takes in a grid position, and returns pixel coordinates of the upper left corner of that grid position
    // Note: this assumes the grid will fit in the canvas, that's checked in the re-size function
    private (int tx, int ty) transformXY(int x, int y, int gridNum)
    {
        var ty = y * PPS / sqzFctr;
        var tx = x * PPS + tiltFctr * (PPS * gridH / sqzFctr - ty);
        tx += padding; // Add padding
        ty += gridOffset * gridNum + padding; // Add grid offset and padding

        return ((int)tx, (int)ty);
    }

    // Render the specified grid with the specified colors
    private async Task DrawGrid(string color1, string color2, string lineColor, int gridIndex)
    {
        // Loop through each grid and then each grid square
        for (var x = 0; x < gridW; x++)
        {
            for (var y = 0; y < gridH; y++)
            {
                var fillColor = (x + y) % 2 == 1 ? color1 : color2; // Find the right color for this square
                await DrawSquare(x, y, gridIndex, fillColor, lineColor, 1.0f); // Render the square
            }
        }
    }

    // Render a specific grid square in the specified colors
    private async Task DrawSquare(int x, int y, int gridIndex, string fillColor, string lineColor, float alpha)
    {
        if (ctx == null)
        {
            return;
        }
        // Set stroke style and begin path
        await ctx.SetStrokeStyleAsync(lineColor);
        await ctx.SetGlobalAlphaAsync(alpha);
        await ctx.SetLineWidthAsync(3);
        await ctx.BeginPathAsync();

        // Draw the border of this square
        var coords = transformXY(x, y, gridIndex);
        await ctx.MoveToAsync(coords.tx, coords.ty);
        coords = transformXY(x, y + 1, gridIndex);
        await ctx.LineToAsync(coords.tx, coords.ty);
        coords = transformXY(x + 1, y + 1, gridIndex);
        await ctx.LineToAsync(coords.tx, coords.ty);
        coords = transformXY(x + 1, y, gridIndex);
        await ctx.LineToAsync(coords.tx, coords.ty);

        // Close the path and fill the square in the right color
        await ctx.ClosePathAsync();
        await ctx.StrokeAsync();
        await ctx.SetFillStyleAsync(fillColor);
        await ctx.FillAsync();
    }

}